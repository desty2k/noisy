
name: build

on:
  push:
    branches: '**'

  workflow_dispatch:

jobs:
  build:
    name: Build - Python ${{ matrix.python-version }} - ${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}
    strategy:
      max-parallel: 2
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.6, 3.9]
        
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run script
      run: |
        python --version
        pip --version
        python noisy.py --config config.json --timeout 60
      
  release:
    runs-on: ubuntu-latest
    needs: [ build ]
    name: Publish release

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install .

      - name: Get package version
        run: |
          python noisy.py --version > version.txt
          echo "BUILD_VERSION=$(cat version.txt)" | tr -d '\r\t\n' >> $GITHUB_ENV

      - name: Get latest version
        id: get_latest_version
        continue-on-error: true
        run: |
          git fetch --tags
          git fetch --prune --unshallow || true
          git describe --abbrev=0 --tags > release_version.txt
          echo "RELEASE_VERSION=$(cat release_version.txt)" | tr -d '\r\t\n' >> $GITHUB_ENV
          echo "${{env.RELEASE_VERSION}}"

      - name: Echo environment variables
        run: |
          echo "Uploaded package version is: "
          echo "${{env.BUILD_VERSION}}"
          echo "Latest package version is:"
          echo "${{env.RELEASE_VERSION}}"

      - name: Generate changelog
        if: env.BUILD_VERSION != env.RELEASE_VERSION && env.RELEASE_VERSION != ''
        id: changelog
        uses: metcalfc/changelog-generator@v1.0.0
        with:
          myToken: ${{ secrets.DEPLOY_TOKEN }}

      - name: Set changelog variable
        if: env.BUILD_VERSION != env.RELEASE_VERSION && env.RELEASE_VERSION != ''
        run: echo "CHANGELOG_BODY=$(echo ${{ steps.changelog.outputs.changelog }})" >> $GITHUB_ENV

      - name: Set first release changelog
        if: env.BUILD_VERSION != env.RELEASE_VERSION && env.RELEASE_VERSION == ''
        run: echo "CHANGELOG_BODY=$(echo First release)" >> $GITHUB_ENV

      - name: Create a release
        if: env.BUILD_VERSION != env.RELEASE_VERSION

        uses: softprops/action-gh-release@v1
        with:
          body: ${{ env.CHANGELOG_BODY }}
          tag_name: ${{ env.BUILD_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOY_TOKEN }}

      - name: Skip release
        if: env.BUILD_VERSION == env.RELEASE_VERSION
        run: |
          echo "Skipping because version does not changed"
